// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.ProjectAuditor.Editor
{
    public class TextFilter : IProjectIssueFilter
    {
        public bool ignoreCase = true;
        public bool searchDependencies;
        public string searchString;
        public TextFilter(Core.PropertyDefinition[] propertyDefinitions = default(Core.PropertyDefinition[])) {}
        public bool Match(ProjectIssue issue);
    }
}

namespace Unity.ProjectAuditor.Editor.UI.Framework
{
    public class AnalysisView : IProjectIssueFilter
    {
        protected const string k_AnalysisIsRequiredText = @"<Missing Data: Please Analyze>";
        protected const string k_MultipleSelectionText = @"<Multiple selection>";
        protected const string k_NoSelectionText = @"<No selection>";
        protected Draw2D m_2D;
        protected IProjectIssueFilter m_BaseFilter;
        protected ProjectAuditorConfig m_Config;
        protected ViewDescriptor m_Desc;
        protected bool m_Dirty = true;
        protected System.Collections.Generic.List<ProjectIssue> m_Issues;
        protected Unity.ProjectAuditor.Editor.Core.IssueLayout m_Layout;
        protected TextFilter m_TextFilter;
        protected ViewManager m_ViewManager;
        protected ViewStates m_ViewStates;
        public ViewDescriptor desc { get; }
        public string documentationUrl { get; }
        public int numFilteredIssues { get; }
        public int numIssues { get; }
        public static int toolbarButtonSize { get; }
        public static int toolbarIconSize { get; }
        public AnalysisView(ViewManager viewManager) {}
        public virtual void AddIssues(System.Collections.Generic.IEnumerable<ProjectIssue> allIssues);
        public virtual void Clear();
        public void ClearSelection();
        public virtual void Create(ViewDescriptor descriptor, Unity.ProjectAuditor.Editor.Core.IssueLayout layout, ProjectAuditorConfig config, ViewStates viewStates, IProjectIssueFilter filter);
        public static void DrawActionButton(UnityEngine.GUIContent guiContent, System.Action onClick);
        public virtual void DrawContent(bool showDetails = false);
        public virtual void DrawDetails(ProjectIssue[] selectedIssues);
        public virtual void DrawFilters();
        protected virtual void DrawInfo();
        public virtual void DrawSearch();
        public static void DrawToolbarButton(UnityEngine.GUIContent guiContent, System.Action onClick);
        public static void DrawToolbarButtonIcon(UnityEngine.GUIContent guiContent, System.Action onClick);
        public void DrawTopPanel();
        public virtual void DrawViewOptions();
        protected virtual void Export(System.Func<ProjectIssue, bool> predicate = default(System.Func<ProjectIssue, bool>));
        public ProjectIssue[] GetSelection();
        public bool IsDiagnostic();
        public bool IsValid();
        public virtual void LoadSettings();
        public void MarkDirty();
        public virtual bool Match(ProjectIssue issue);
        public virtual void SaveSettings();
        public void SetSearch(string filter);
        public void SetSelection(System.Func<ProjectIssue, bool> predicate);
        protected static class LayoutSize
        {
            public static readonly int ActionButtonHeight = 30;
            public static readonly int ActionButtonWidth = 200;
            public static readonly int DependencyViewHeight = 200;
            public static readonly int DetailsPanelWidth = 200;
            public static readonly int FoldoutMaxHeight = 220;
            public static readonly int FoldoutWidth = 260;
            public static readonly int ToolbarButtonSize = 80;
            public static readonly int ToolbarIconSize = 32;
        }
    }

    public class Draw2D
    {
        public Draw2D(string shaderName) {}
        public void ClearClipRect();
        public void DrawBox(float x, float y, float w, float h, UnityEngine.Color col);
        public void DrawBox(float x, float y, float w, float h, float r, float g, float b);
        public void DrawEnd();
        public void DrawFilledBox(float x, float y, float w, float h, UnityEngine.Color col);
        public void DrawFilledBox(float x, float y, float w, float h, float r, float g, float b);
        public void DrawLine(float x, float y, float x2, float y2, UnityEngine.Color col);
        public void DrawLine(float x, float y, float x2, float y2, float r, float g, float b);
        public bool DrawStart(UnityEngine.Rect r, Draw2D.Origin origin = Draw2D.Origin.TopLeft);
        public bool DrawStart(float w, float h, Draw2D.Origin origin = Draw2D.Origin.TopLeft, UnityEngine.GUIStyle style = default(UnityEngine.GUIStyle));
        public UnityEngine.Rect GetClipRect();
        public void OnGUI();
        public void SetClipRect(UnityEngine.Rect clipRect);
        public enum Origin
        {
            BottomLeft = 1,
            TopLeft = 0,
        }
    }

    public class ProgressBar : IProgress
    {
        public ProgressBar() {}
        public void Advance(string description = @"");
        public void Clear();
        public void Start(string title, string description, int total);
    }

    public static class SharedStyles
    {
        public static UnityEngine.GUIStyle BoldLabel { get; }
        public static UnityEngine.GUIStyle Foldout { get; }
        public static UnityEngine.GUIStyle IconLabel { get; }
        public static UnityEngine.GUIStyle Label { get; }
        public static UnityEngine.GUIStyle LabelWithDynamicSizeWithDynamicSize { get; }
        public static UnityEngine.GUIStyle LargeLabel { get; }
        public static UnityEngine.GUIStyle LinkLabel { get; }
        public static UnityEngine.GUIStyle TextArea { get; }
        public static UnityEngine.GUIStyle TextAreaWithDynamicSize { get; }
        public static UnityEngine.GUIStyle TitleLabel { get; }
        public static void SetFontDynamicSize(int fontSize);
    }

    public static class Utility
    {
        public static readonly UnityEngine.GUIContent ClearSelection;
        public static readonly UnityEngine.GUIContent CopyToClipboard;
        public static readonly UnityEngine.GUIContent OpenIssue;
        public static readonly UnityEngine.GUIContent OpenScriptReference;
        public static bool BoldFoldout(bool toggle, UnityEngine.GUIContent content);
        public static void DrawHelpButton(UnityEngine.GUIContent content, string url);
        public static void DrawSelectedText(string text);
        public static UnityEngine.GUIContent GetIcon(Utility.IconType iconType, string tooltip = default(string));
        public static UnityEngine.GUIContent GetLogLevelIcon(Unity.ProjectAuditor.Editor.Core.LogLevel logLevel, string tooltip = default(string));
        public static UnityEngine.GUIContent GetPlatformIcon(UnityEditor.BuildTargetGroup buildTargetGroup);
        public static UnityEngine.GUIContent GetSeverityIcon(Unity.ProjectAuditor.Editor.Diagnostic.Severity severity, string tooltip = default(string));
        public static UnityEngine.GUIContent GetSeverityIconWithText(Unity.ProjectAuditor.Editor.Diagnostic.Severity severity);
        public static UnityEngine.GUIContent GetTextContentWithAssetIcon(string displayName, string assetPath);
        public static UnityEngine.GUIContent GetTextWithLogLevelIcon(string text, string tooltip, Unity.ProjectAuditor.Editor.Diagnostic.Severity severity);
        public static UnityEngine.Texture2D MakeColorTexture(UnityEngine.Color col);
        public enum IconType
        {
            Critical = 3,
            Download = 14,
            Error = 2,
            Fix = 13,
            GreenCheckMark = 20,
            Help = 7,
            Hierarchy = 11,
            Info = 0,
            Load = 15,
            Major = 4,
            Minor = 6,
            Moderate = 5,
            Refresh = 8,
            Save = 16,
            Settings = 9,
            StatusWheel = 10,
            Trash = 17,
            View = 18,
            Warning = 1,
            WhiteCheckMark = 19,
            ZoomTool = 12,
        }
    }

    public class ViewDescriptor
    {
        public int analyticsEvent;
        public IssueCategory category;
        public UnityEngine.GUIContent dependencyViewGuiContent;
        public bool descriptionWithIcon;
        public string displayName;
        public System.Func<ProjectIssue, string> getAssemblyName;
        public string menuLabel;
        public int menuOrder;
        public System.Action<UnityEditor.GenericMenu, ViewManager, ProjectIssue> onContextMenu;
        public System.Action<ViewManager> onDrawToolbar;
        public System.Action<Location> onOpenIssue;
        public System.Action<Unity.ProjectAuditor.Editor.Diagnostic.Descriptor> onOpenManual;
        public bool showAssemblySelection;
        public bool showDependencyView;
        public bool showFilters;
        public bool showInfoPanel;
        public System.Type type;
        public ViewDescriptor() {}
        public static ViewDescriptor[] GetAll();
        public static bool Register(ViewDescriptor descriptor);
    }

    public sealed class ViewManager
    {
        public System.Action<IssueCategory> onAnalyze;
        public System.Action<int> onViewChanged;
        public System.Action onViewExported;
        public int activeViewIndex { get; }
        public int numViews { get; }
        public ViewManager(IssueCategory[] categories) {}
        public void AddIssues(System.Collections.Generic.IReadOnlyCollection<ProjectIssue> issues);
        public void ChangeView(IssueCategory category);
        public void Clear();
        public void ClearView(IssueCategory category);
        public void Create(ProjectAuditor projectAuditor, ViewStates viewStates, System.Action<ViewDescriptor, bool> onCreateView = default(System.Action<ViewDescriptor, bool>), IProjectIssueFilter filter = default(IProjectIssueFilter));
        public AnalysisView GetActiveView();
        public AnalysisView GetView(int index);
        public AnalysisView GetView(IssueCategory category);
        public bool HasView(IssueCategory category);
        public bool IsValid();
        public void LoadSettings();
        public void MarkViewsAsDirty();
        public void SaveSettings();
    }

    public class ViewStates
    {
        public bool actions = true;
        public bool dependencies = true;
        public bool filters = true;
        public int fontSize = 12;
        public bool info = true;
        public const int k_MaxFontSize = 22;
        public const int k_MinFontSize = 12;
        public bool mutedIssues;
        public bool onlyCriticalIssues;
        public ViewStates() {}
    }
}
